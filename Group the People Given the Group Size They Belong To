There are n people that are split into some unknown number of groups. Each person is labeled with a unique ID from 0 to n - 1.

You are given an integer array groupSizes, where groupSizes[i] is the size of the group that person i is in. For example, if groupSizes[1] = 3, then person 1 must be in a group of size 3.

Return a list of groups such that each person i is in a group of size groupSizes[i].

Each person should appear in exactly one group, and every person must be in a group. If there are multiple answers, return any of them. It is guaranteed that there will be at least one valid solution for the given input.
==========================================================================================================
class Solution {
    public List<List<Integer>> groupThePeople(int[] a) {
        List<List<Integer>> li = new ArrayList<List<Integer>>();
        Map<Integer,ArrayList<Integer>> m = new HashMap<Integer,ArrayList<Integer>>();
        int n=a.length;
        for(int i=0;i<n;i++){
            if(m.containsKey(a[i])){
                ArrayList<Integer> temp=m.get(a[i]);
                temp.add(i);
                m.put(a[i],temp);
                if(m.get(a[i]).size()==a[i]){
                     li.add(m.get(a[i]));
                     m.put(a[i],new ArrayList<Integer>());
                }
            }
            else{
                ArrayList<Integer> temp= new ArrayList<>();
                temp.add(i);
                m.put(a[i],temp);
                if(m.get(a[i]).size()==a[i]){
                     li.add(m.get(a[i]));
                     m.put(a[i],new ArrayList<Integer>());
                }
            }
        }
        return li;


    }
}
